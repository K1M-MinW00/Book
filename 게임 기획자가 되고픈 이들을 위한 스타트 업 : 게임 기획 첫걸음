/23.10.06/

기획 훈련 방법

1) 기존의 스프트웨어 일부를 변경 : RPG 의 전투 시스템만 변경하거나 액션 게임의 조작 방법만 변경. (어떻게 변경할지 구체적인 방법과 왜 변경하는지 생각 -> 변경 범위를 조금씩 넓혀 가며 게임 전체 디자인에 대한 시각 키우기)
2) 브레인 스토밍

Ex) 낚시가 가진 게임 요소 : 물고기를 낚느냐 마느냐(도박성) , 장비 및 장소를 선택(공격성) , 물고기가 걸리고 나서 끌어올리기까지 물고기와 힘겨루기(액션성) ,
                          낚아 올린 물고기를 모으기(수집성,다양성 - 같은 종이라도 크기에 따라) , 낚시 하는 장소를 넓혀 무한대로 스테이지를 생성(확장성)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
비즈니스 모델별 기획 요소

1) 온라인 게임
2) 월정액 요금제
3) 아이템 과금

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
게임의 주요 장르와 그 구조 (장르-핵심 요소-재미 요소-예시)

1) RPG (Role Playing Game) : 적을 무너뜨리고 획득한 경험치를 통해 캐릭터가 성장하는 구조
  - 파라미터, 맵, 장비(아이템), 시나리오
  - 적을 무너뜨리고 성장해 가는 과정이 재밌어야 함. 전투에서 획득하는 경험치의 타당성, 레벨업의 빈도, 플레이어가 성장을 실감할 수 있도록 적의 파라미터 조정 ...
  - Ex) 어쌔신 크리드 시리즈, 마법학교 아르피아, 포켓몬스터

1-1) MMORPG (Massively Multiplayer Online Role-Playing Game) : 같은 필드 내에서 수십, 수백 명 정도의 플레이어가 동시에 접속하는 RPG
  - PvP, PvE 시스템, 협력 플레이, 파티-길드 시스템
  - 여러 사람이 함께 플레이, 협력 플레이에서 나오는 성취감, 특정 세력에 대한 소속감 ...
  - Ex) 바람의 나라, 메이플스토리, 리니지

1-2) AOS (스타크래프트 유즈맵 Aeon of Strife 의 약자에서 장르명으로 굳혀짐): 플레이어가 하나의 캐릭터를 선택하여 정해진 하나의 맵에서 레벨과 스킬을 올리고 아이템을 갖춰 영웅을 강화시켜 상대방 진영을 파괴하는 실시간 공성 구조
  - 대칭형 맵, 캐릭터, 크리처, 공성 건물, 아이템과 스킬
  - 여러 사람이 함께 팀을 이루어 플레이, 다양한 전략과 영웅 캐릭터 ...
  - Ex) League Of Legends, 스타크래프트 유즈맵, 히어로즈 오브 더 스톰

2) RTS (Real-Time Strategy) : 게임상에 주어진 모든 전략적 요소를 활용하여 적을 없애고 목적을 달성하는 구조
  - 맵, 개체 유닛, 상성
  - 전략과 실시간 조작의 멀티 태스킹 능력, 무승부 시스템 ...
  - Ex) 스타크래프트

3) 액션 게임 : 자신의 캐릭터를 움직여 적 캐릭터에게 가한 공격이 명중했는지, 장애물을 안전하게 뛰어 넘었는지를 실시간으로 판단하는 구조
  - 플레이어 캐릭터, 적 캐릭터, 공격 무기, 결과(득점 또는 효과), 타격 판정
  - 액션의 경쾌함, 다양한 액션 표현(달리기, 쪼그려 앉기, 밀기, 매달리기, 기어오르기, 활강하기 등) ...
  - Ex) 갓 오브 워 시리즈, 원신, 슈퍼 마리오 시리즈

4) FPS (First-Person Shooting) : 1인칭 시점의 액션 게임
  - 캐릭터, 공격 명령어, 파라미터, 타격 판정, 액션, 장비(아이템), 맵
  - 총을 쏴서 대상을 맞췄을 때 느끼는 쾌감, 좋은 위치를 선정하거나 허를 찌르는 공격을 구사하며 즐기는 게임
  - Ex) 서든어택, 배틀그라운드, 콜 오브 듀티 시리즈

...
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
기획서

  - 게임의 장르, 대상 하드웨어, 게임의 개요와 전체적인 규모 등 프로젝트의 골격을 설명하기 위한 자료
  - 실현하고자 하는 게임의 매력을 문서를 통해 전달하는 역할

 - 게임 디자인
  1) 콘셉트 결정 : 느끼고 싶은 쾌감, 즐기고 싶은 게임이 무엇인지를 명확하게 결정 -> 각각의 사양들이 하나의 콘셉트를 기준으로 유기적으로 연결, 일관성 유지
  2) 기획 구체화 : 콘셉트를 실현하기 위한 최적의 장르, 게임을 실현하는데 필요한 룰을 결정
  3) 기획 사양화 : 룰을 실현하기 위해 표시해야 할 것, 어떤 조작방법이 콘텐츠에 적합한지를 결정
  4) 콘셉트에 따라 사양을 통일화하여 게임 제작

 - 게임을 구성하는 4가지 요소
  * 명제 : 플레이어가 해당 스테이지와 화면에서 해결해야 하는 과제. 전체적으로 봤을 때, 게임의 세계관과 시나리오를 사용자에게 설명해야 하는 부분
  * 해법 : 플레이어에게 요구되는 행동 또는 입력 방법. 개발자가 플레이어에게 어떤 조작을 요구하는지, 게임을 즐기는 방법을 설명하는 부분
  * 결과 : 플레이어의 행동에 따른 반응(결과)을 화면에 표시. 최종 게임 결과, 버튼 조작 후의 반응 등을 설명하는 부분
  * 응용 : 해법에 의해 얻은 결과를 변형하여 이용. 명제, 해법, 결과를 통해 얻은 개발자와 플레이어의 경험을 이용하여 폭 넓은 게임을 체험할 수 있게 하는 부분 (점프 -> 더블 점프, 파쿠르)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
사양서

  - 디자이너와 프로그래머가 작업을 할 때 필요한 작업 지시서
  - 전체 흐름도(메인 화면을 기준으로 게임 전체의 개요를 연결해서 나타낸 흐름도) + 화면 사양 + 처리 흐름도(조건 판단) + 데이터 표 + 플래그 관리표 + 저장 데이터 관리표
  - 데이터 표 작성 시 유의사항
    1) Excel 을 비롯한 표 계산 소프트웨어 계산식이나 함수를 이용하여 값이 연동되도록 표 작성 : 레벨 디자인을 할 때 편리
    2) 값을 설정할 때, 정수인지 실수인지를 결정
    3) 값의 상한과 하한 적절하게 설정 : 기초가 되는 파라미터(경험치)를 통해 상한과 하한(공격력, 방어력)을 적절히 설정
  * 게임 상에서 설정한 값(파라미터)는 나중에 다시 조정할 가능성이 높으므로 사양서가 아닌 데이터만을 정리해 둔 문서에 최저값과 최대값을 설정해두고 최종적으로 그 범위 안에서 값을 결정

  - 사양서 작성 시 테크닉
    1) 문장은 짧게, 항목별로 작성
    2) 하나의 사양서에 여러 개의 요소를 포함하지 말 것 : 게임 규칙을 설명하는 사양서, 화면 처리를 설명하는 사양서 등 문서를 목적에 따라 분리

    Ex) 플레이어의 캐릭터가 적의 공격을 받아 데미지를 받음. -> 적은 어떤 캐릭터인지 ? 공격 판정은 어떻게 할 것인지 ? 데미지 계산은 어떻게 할 것인지 ? 데미지 입었을 때의 반응은 ? ...

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
시나리오 집필 규칙

  - 어미 통일
  - 마침표의 사용과 단위, 용어 통일

  - 줄거리 작성 시 고려사항
    1) 어떤 구성으로 할 것인지
    2) 전체적으로 기승전결을 어떻게 전개할 것인지
    3) 분기를 할 것인지
    4) 시나리오의 개요

  - 시나리오 분기 : 같은 캐릭터, 같은 무대 설정을 사용해서 이야기만 추가함으로써 사용자의 플레이 시간을 늘릴 수 있음.
    - 시나리오의 분기 시작점과 합류 지점을 설정 : 합류 지점에서 만났을 때, 시간적, 공간적 모순이 없도록 설정
    Ex) 루트 A 의 경우, 지름길이였지만 적과 싸우다가 시간이 걸림 / 루트 B의 경우, 안전한 길로 온 덕분에 적을 마주치지 않고 제 시간에 도착

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
튜토리얼 작성법

  - 게임 조작 방법을 실제 게임을 통해 설명함으로써 기억하도록 하기 위한 도움말
  1) 설명 + 실천 : A 버튼으로 점프를 합니다.
  2) 퀘스트형 : 'OO로 가서 OO 를 한다.' 라는 조건을 제시한 후 실제 조작을 하게 함.
  3) 기능 개방형 : 메인이 아닌 기능을 설명, 게임 초반에 필요 없는 기능은 일부러 표시하지 않고, 개방할 타이밍이 오면 입력 가능한 상태로 바꿔서 동작을 유도.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
레벨 디자인과 조정

  - 게임의 묘미를 결정하는 중요한 작업
  - 초반에는 게임과정을 짧게, 그리고 서서히 길게
  - 플레이어에게 여러 감정을 느끼게 하기 (희로애락이 많을수록 게임이 끝난 후, 강한 인상이 남음, 스테이지 간의 완급을 고려하여 레벨 디자인 하기)
  * 비호감도 관심 - 불만을 이야기할 정도로 보는 사람의 마음을 움직이게 했다는 점

  - 새로운 요소나 아이템은 바로 사용할 수 있도록 설정 : 사용 방법을 이해해야 하기 때문에 사용할 기회가 바로 가까이 있어야 함.
  Ex) 낙하산 입수 -> 옆 화면에 낭떠러지 배치

- 시작 지점으로 돌아가게 하기 : 플레이어의 캐릭터와 기술이 성장했는지 플레이어가 실감할 수 있게끔 유도. (게임 초반에 나오는 적을 간단히 쓰러뜨림으로써 얻는 쾌감)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
디버깅 방법과 보고 방법

  - 용어 구분 (Ex : 게임이 멈추었다.)
    - 진행 정지 : 프로그램 자체는 움직이고 있지만, 사양상으로 모순되거나 기능이 일부 가동되지 않는 이유로 게임을 진행할 수 없는 상태 (미로에 출구가 없는 지도를 만듦)
    - 조작 불능 상태(Hang up) : 입력이 되지 않거나 화면이 완전히 멈춘 상태. (메모리 부족으로 더 이상 처리를 할 수 없는 상태 - 가장 심각한 상황)
    - 일반적 오류 : 표시 오류나 오탈자와 같이 프로그램 안의 일부가 망가지거나 정상적으로 표시되지 않는 상태 ( 화면 깨짐, 문자 깨짐, 색상 불일치, 플러그 설정 오류 ...)

  - 디버그 : 소프트웨어의 오류와 허점을 찾아내는 작업 (Ex : 버튼을 동시에 눌러보기, 갑자기 전원을 끄는 체크, 비정상적인 아이템 사용 ...)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
매니지먼트(제작 스케줄 관리)

  - 무엇을(사양의 내용-프로그램, 이미지), 얼마만큼(사양과 관련된 물량-데이터의 수), 언제까지(기일)
  - 예상과 실적을 작성하여 견적에 비해 어느 정도 오차가 있는지 비교하여 앞으로의 상황을 예상

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
인정받는 게임 기획자가 되기 위해서

  - 분석 -> 우선순위 -> 작업
    1) 분석 : 무엇이 문제인가? 그 원인은 무엇인가? 자신의 힘으로 해결할 수 있는 문제인가? 검토와 상담이 필요한 상황인가? 곧바로 작업이 가능한 상황인가?
    2) 우선순위 : 다른 사람에게 영향을 미치는 작업으로 변경과 검토가 필요한 것, 완성 예정일이 빠른 것, 작업이 빨리 끝나는 것 ...
    3) 작업

  - 유행하는 화제에 대해 항상 관심 가지기 : 게임 전문 정보 사이트 보는 습관 가지기, 인기가 많은 작품을 직접 플레이하고 분석해 보기 , 후기는 참고 정도로만 생각하기
  - 나만의 고집 갖기 : 재미의 핵심이 되는 부분을 하나 정하고 그 부분에 대해서는 다른 작업자들로부터 어떤 이야기를 듣더라도 사수할 수 있어야 함. (최소한의 쾌적함과 조작성에 대해선 많은 의겸 수렴하기)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
